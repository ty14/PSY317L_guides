[
<<<<<<< HEAD
["introduction-to-data-carpentry.html", "4 Introduction to Data Carpentry 4.1 tidyverse 4.2 filter() 4.3 select() 4.4 arrange() 4.5 mutate() 4.6 Wide vs Long Data 4.7 Joins", " 4 Introduction to Data Carpentry Data carpentry gives us the tools to work with large data sets. During this chapter you will learn basic concepts, skills to help you work with functions to help tidy and manage your data. check check 4.1 tidyverse The package tidyverse is what we will be using for most of our data carpentry. tidyverse is a larger package which includes several packages useful for dealing with data such as tidyr, dplyr, ggplot2, and more. All of these packages work together to manipulate, reshape, and visual data. Before using tidyverse you will need to install and load the package. You will only need to install a package once, but will have to load a library on every script you plan to use it. install.package(tidyverse) #install From the tidyverse package rread we can read in our data. library(tidyverse) #load ## -- Attaching packages ---------------------------------------------- tidyverse 1.3.0 -- ## v ggplot2 3.3.2 v purrr 0.3.3 ## v tibble 3.0.0 v dplyr 0.8.5 ## v tidyr 1.0.2 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.5.0 ## -- Conflicts ------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() df &lt;- read_csv(&quot;data/bloodwork.csv&quot;) ## Parsed with column specification: ## cols( ## ids = col_character(), ## age = col_double(), ## sex = col_character(), ## state = col_character(), ## children = col_double(), ## smoker = col_character(), ## hrate = col_double(), ## bpsyst = col_double(), ## cellcount = col_double(), ## immuncount = col_double(), ## immuncount2 = col_double() ## ) df is the name of our new dataframe, which will include all data from the bloodwork.csv file. Before we can work with our data we need to what we have to work with using the functions head() and tail() allows you to see the first and last 6 rows, respectfully. head(df) ## # A tibble: 6 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; tail(df) ## # A tibble: 6 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JIB 66 fema~ NY 0 no 62 121 0.097 1.39 ## 2 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 3 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 4 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## 5 HHJ 69 male CT 2 no 71 121 0.475 0.463 ## 6 CCG 70 male CT 0 yes 80 132 0.078 1.06 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; should we explain the dataset?? idk 4.2 filter() Use %&gt;% and ‘filter’ to only keep rows where the hrate, heart rate, is over 85. &gt; means greater than. df %&gt;% filter(hrate &gt; 85) ## # A tibble: 0 x 11 ## # ... with 11 variables: ids &lt;chr&gt;, age &lt;dbl&gt;, sex &lt;chr&gt;, state &lt;chr&gt;, ## # children &lt;dbl&gt;, smoker &lt;chr&gt;, hrate &lt;dbl&gt;, bpsyst &lt;dbl&gt;, cellcount &lt;dbl&gt;, ## # immuncount &lt;dbl&gt;, immuncount2 &lt;dbl&gt; Or use %&gt;% and ‘filter’ to only keep rows where the sex is equal to female. df %&gt;% filter(sex == &quot;female&quot;) ## # A tibble: 18 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 3 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 4 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 5 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 6 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 7 BED 28 fema~ CT 0 no 62 104 0.082 1.18 ## 8 BFB 28 fema~ NJ 0 no 68 118 0.197 0.724 ## 9 IEA 29 fema~ CT 0 yes 74 117 0.429 5.15 ## 10 CDC 38 fema~ NJ 0 no 66 133 0.038 8.00 ## 11 FJG 40 fema~ NJ 0 yes 80 109 0.253 5.63 ## 12 DAG 41 fema~ CT 0 yes 70 142 0.339 5.52 ## 13 FHA 53 fema~ CT 2 no 77 125 0.099 0.034 ## 14 JHC 55 fema~ CT 0 no 73 121 0.093 1.32 ## 15 JIB 66 fema~ NY 0 no 62 121 0.097 1.39 ## 16 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 17 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 18 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; You can create new datasets from filtered data. female &lt;- df %&gt;% filter(sex == &quot;female&quot;) 4.3 select() Use %&gt;% then select to just select the rows you want. df %&gt;% select(ids, sex, smoker,hrate) ## # A tibble: 30 x 4 ## ids sex smoker hrate ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 JEC female no 63 ## 2 GBH male yes 73 ## 3 EDH female no 65 ## 4 AAA female no 66 ## 5 AJF female no 67 ## 6 FJC female yes 80 ## 7 IEE female no 71 ## 8 BED female no 62 ## 9 BFB female no 68 ## 10 IEA female yes 74 ## # ... with 20 more rows Or if you just want to get rid of one column you can just use %&gt;% then select(-var) df %&gt;% select(-bpsyst) ## # A tibble: 30 x 10 ## ids age sex state children smoker hrate cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 0.014 3.97 ## 7 IEE 26 fema~ NY 2 no 71 0.093 5.41 ## 8 BED 28 fema~ CT 0 no 62 0.082 1.18 ## 9 BFB 28 fema~ NJ 0 no 68 0.197 0.724 ## 10 IEA 29 fema~ CT 0 yes 74 0.429 5.15 ## # ... with 20 more rows, and 1 more variable: immuncount2 &lt;dbl&gt; if you want these selections to be permanent then you need to rewrite selections in new dataframe. df1 &lt;- df %&gt;% select(-bpsyst) 4.4 arrange() blah 4.5 mutate() Create new columns using %&gt;% then mutate df2 &lt;- df %&gt;% mutate(totalimmune = immuncount + immuncount2) Now df2 will have 12 columns, instead of 11. 4.6 Wide vs Long Data blah pivot_wide() pivot_long() 4.7 Joins really important…. maybe one day we’ll write about this "]
=======
["regression.html", "11 Regression", " 11 Regression blah blah blah library(tidyverse) ## -- Attaching packages --------------------------------------- tidyverse 1.2.1 -- ## v ggplot2 3.2.1 v purrr 0.2.4 ## v tibble 2.1.3 v dplyr 0.8.3 ## v tidyr 1.0.2 v stringr 1.3.1 ## v readr 1.1.1 v forcats 0.3.0 ## Warning: package &#39;ggplot2&#39; was built under R version 3.5.3 ## Warning: package &#39;tibble&#39; was built under R version 3.5.3 ## Warning: package &#39;tidyr&#39; was built under R version 3.5.3 ## Warning: package &#39;dplyr&#39; was built under R version 3.5.3 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() "]
>>>>>>> 130effa8194c087342ac1c9261bbae12fe1d42a0
]
