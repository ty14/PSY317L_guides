[
["data-visualization.html", "5 Data Visualization 5.1 Intro to ggplot2 5.2 Histogram 5.3 Scatter 5.4 Line", " 5 Data Visualization The package ggplot2 is used to visualize data. Before starting you should load the tidyverse package, which includes ggplot2 and other tools, at the very top of your script. library(tidyverse) 5.1 Intro to ggplot2 Read in data df &lt;- read_csv(&quot;data/BlueJays.csv&quot;) ## Parsed with column specification: ## cols( ## BirdID = col_character(), ## KnownSex = col_character(), ## BillDepth = col_double(), ## BillWidth = col_double(), ## BillLength = col_double(), ## Head = col_double(), ## Mass = col_double(), ## Skull = col_double(), ## Sex = col_double() ## ) Start with a black canvas ggplot() Just adding the datset to the blank canvas, but nothing plotted yet. ggplot(df) You need to use aes() for every ggplot you make, and inside aes() we’ll put what our x and y axis will be. We say what the x and y are, and it creates scales on each axis, but we didn’t tell it what to plot yet. ggplot(df, aes(x=Mass, y=Head) ) Need to add points. ggplot(df, aes(x=Mass, y=Head) ) + geom_point() What if we want to change the color of the points? ggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=&#39;red&#39;) What if we want to color the points based on another variable ggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + geom_point() Basically, you can just keep adding to the initial plot to make your graph the best visualization to fit your data. There are many different graphs you can make with ggplot. What graph you make will depend on what type of data you have and what you want to visual from your data. The next couple sections will take the base of ggplot and show you examples with different types of points. They will start general then show you how to customize plots. General information about customizing plots in ggplot: 1. ALLL THE COLORS IN THE WORLD https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/ http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf change the type of points you plot with geom_point(pch = blah): Different Types of Points Also, you can change the color and size of points by `geom_point(size = 3, color = “blue”). Built in themes: theme_bw() a variation on theme_grey() that uses a white background and thin grey grid lines. theme_linedraw() A theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. theme_light() similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data. theme_dark() the dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin colored lines pop out. theme_minimal() A minimalistic theme with no background annotations. theme_classic() A classic-looking theme, with x and y axis lines and no gridlines. theme_void() A completely empty theme REFERENCE: your slides elol and https://ggplot2-book.org/ 5.2 Histogram Why make a histogram? Histograms are a good place to start with your data, it will give you a visual representation of your data distribution. blah probably needs more, idk what to say. Load libraries and data library(tidyverse) df &lt;- read_csv(&quot;data/films.csv&quot;) ## Parsed with column specification: ## cols( ## film = col_character(), ## year = col_double(), ## rottentomatoes = col_double(), ## imdb = col_double(), ## metacritic = col_double() ## ) head(df) ## # A tibble: 6 x 5 ## film year rottentomatoes imdb metacritic ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Avengers: Age of Ultron 2015 74 7.8 66 ## 2 Cinderella 2015 85 7.1 67 ## 3 Ant-Man 2015 80 7.8 64 ## 4 Do You Believe? 2015 18 5.4 22 ## 5 Hot Tub Time Machine 2 2015 14 5.1 29 ## 6 The Water Diviner 2015 63 7.2 50 Making a ggplot2 histogram, which will plot imdb scores. ggplot(df, aes(x=imdb)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Now lets make the bars doderblue and border them white. ggplot(df, aes(x=imdb)) + geom_histogram(color=&#39;white&#39;, fill=&quot;dodgerblue&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. You can also control the bin width of histograms, this code has a bin width of 0.2 rating points ggplot(df, aes(x = imdb)) + geom_histogram(binwidth = 0.2, color=&quot;white&quot;, fill=&quot;dodgerblue&quot;) Further you can control where the boundaries of each bin lie on the x-axis ggplot(df, aes(x = imdb)) + geom_histogram(binwidth = 0.2, color=&quot;white&quot;, fill=&quot;dodgerblue&quot;,boundary=4) Just be careful with using the boundaries that it does not crop your histogram incorrectly. Changing histograms too much can lead to miss representing the data. (idk if that is said correctly) Here is the full code with some additional customizations ggplot(df, aes(x = imdb)) + geom_histogram(binwidth = 0.2, color=&quot;white&quot;, fill=&quot;dodgerblue&quot;,boundary=4) + theme_classic() + ggtitle(&quot;Histogram of IMDB Ratings&quot;) + xlab(&quot;Rating&quot;) + ylab(&quot;Frequency&quot;) Instead of Viewing as a histogram, you can also show the data as a density curve ggplot(df, aes(x = imdb)) + geom_density(color = &quot;navy&quot;, fill = &quot;dodgerblue&quot;) Adding, alpha gives it a bit of transparency ggplot(df, aes(x = imdb)) + geom_density(color = &quot;navy&quot;, fill = &quot;dodgerblue&quot;, alpha=.4) Comparing Distributions with side by side Histograms Switching to new data life &lt;- read_csv(&quot;data/lifeexp.csv&quot;) ## Parsed with column specification: ## cols( ## country = col_character(), ## continent = col_character(), ## year = col_character(), ## lifeExp = col_double(), ## pop = col_double(), ## gdpPercap = col_double() ## ) head(life) ## # A tibble: 6 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan Asia year_1952 28.8 8425333 779. ## 2 Afghanistan Asia year_2007 43.8 31889923 975. ## 3 Albania Europe year_1952 55.2 1282697 1601. ## 4 Albania Europe year_2007 76.4 3600523 5937. ## 5 Algeria Africa year_1952 43.1 9279525 2449. ## 6 Algeria Africa year_2007 72.3 33333216 6223. tail(life) ## # A tibble: 6 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Yemen, Rep. Asia year_1952 32.5 4963829 782. ## 2 Yemen, Rep. Asia year_2007 62.7 22211743 2281. ## 3 Zambia Africa year_1952 42.0 2672000 1147. ## 4 Zambia Africa year_2007 42.4 11746035 1271. ## 5 Zimbabwe Africa year_1952 48.5 3080907 407. ## 6 Zimbabwe Africa year_2007 43.5 12311143 470. First lets plot a histogram of life Expectancy across all countries ggplot(life, aes(x=lifeExp)) + geom_histogram(color=&#39;white&#39;, fill=&#39;lightseagreen&#39;) #warning is ok ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Since we’ve combined data from the two years - we should separate histograms for each year. We can do this by Overlaiding histograms. ggplot(life, aes(x=lifeExp, fill=year)) + geom_histogram(position=&quot;identity&quot;) #horrible ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. That graph was horrible, but if you costomize the plot by defining binwith and adding an alpha level it will get better. ggplot(life, aes(x=lifeExp, fill=year)) + geom_histogram(position=&quot;identity&quot;, alpha=.5, binwidth=2) Let add color now to make it even better, this makes the borders and fill of the bars black ggplot(life, aes(x=lifeExp, fill=year)) + geom_histogram(position=&quot;identity&quot;, alpha=.5, binwidth=2, color=&#39;black&#39;) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;)) Comparing Distributions can also be done with geom_density(), this is usually simpler to compare. Initial plot ggplot(life, aes(x=lifeExp, fill=year)) + geom_density(aes(fill = year), alpha = 0.4) Adding customized colors ggplot(life, aes(x=lifeExp, fill=year)) + geom_density(aes(fill = year), alpha = 0.4) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;)) And adding a theme ggplot(life, aes(x=lifeExp, fill=year)) + geom_density(aes(fill = year), alpha = 0.4) + scale_fill_manual(values = c(&quot;#999999&quot;, &quot;#E69F00&quot;)) + theme_classic() 5.3 Scatter Scatter plots are used when you are trying to illustrate a trend in your data. These plots can be important in statistics because it can help show the correlation between two variables. geom_point() is used for scatter plots. Lets look at the dataframe cheese: cheese &lt;- read_csv(&quot;data/cheese.csv&quot;) ## Parsed with column specification: ## cols( ## type = col_character(), ## sat_fat = col_double(), ## polysat_fat = col_double(), ## monosat_fat = col_double(), ## protein = col_double(), ## carb = col_double(), ## chol = col_double(), ## fiber = col_double(), ## kcal = col_double() ## ) head(cheese) ## # A tibble: 6 x 9 ## type sat_fat polysat_fat monosat_fat protein carb chol fiber kcal ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 blue 18.7 0.8 7.78 21.4 2.34 75 0 353 ## 2 brick 18.8 0.784 8.60 23.2 2.79 94 0 371 ## 3 brie 17.4 0.826 8.01 20.8 0.45 100 0 334 ## 4 camembert 15.3 0.724 7.02 19.8 0.46 72 0 300 ## 5 caraway 18.6 0.83 8.28 25.2 3.06 93 0 376 ## 6 cheddar 21.1 0.942 9.39 24.9 1.28 105 0 403 Start with a simple plot looking at the outcome of cholesterol on saturated fat intake. ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point() Adding color ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) Adding trend line with geom_smooth ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Here you can see it automatically puts a shaded area around your trend line, this is supposed to represent the confident interval. There is a way to get rid of it - ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) + geom_smooth(method = &quot;lm&quot;, se = FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; You can also change the color of the trend line, by adding to geom_smooth() ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) + geom_smooth(method = &quot;lm&quot;, se= F, color = &quot;black&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Label your x and y axis ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) + geom_smooth(method = &quot;lm&quot;, se= F, color = &quot;black&quot;) + xlab(&quot; Saturated Fat Intake&quot;) + ylab(&quot;Cholesterol&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; Add a title and a theme to make your graph complete ggplot(cheese, aes(x=sat_fat, y=chol) ) + geom_point(color = &quot;purple&quot;) + geom_smooth(method = &quot;lm&quot;, se= F, color = &quot;black&quot;) + xlab(&quot; Saturated Fat Intake&quot;) + ylab(&quot;Cholesterol&quot;) + ggtitle(&quot;Saturated Fat Intake and Cholesterol&quot;) + theme_minimal() ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.4 Line Line graph help connect values (y-axis) over time (x-axis) jennifer &lt;- read_csv(&quot;data/jennifer.csv&quot;) ## Parsed with column specification: ## cols( ## year = col_double(), ## sex = col_character(), ## name = col_character(), ## n = col_double(), ## prop = col_double() ## ) head(jennifer) ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1916 Female Jennifer 5 0.00000461 ## 2 1919 Female Jennifer 6 0.00000511 ## 3 1920 Female Jennifer 7 0.00000563 ## 4 1921 Female Jennifer 5 0.00000391 ## 5 1922 Female Jennifer 7 0.00000561 ## 6 1923 Female Jennifer 9 0.00000719 tail(jennifer) ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2012 Female Jennifer 1923 0.000993 ## 2 2013 Female Jennifer 1689 0.000878 ## 3 2014 Female Jennifer 1521 0.000779 ## 4 2015 Female Jennifer 1283 0.000660 ## 5 2016 Female Jennifer 1159 0.000601 ## 6 2017 Female Jennifer 1042 0.000556 How to build up a line graph, start just like the other graphs ggplot(jennifer, aes(x=year, y=n) ) Look at data as points first ggplot(jennifer, aes(x=year, y=n) ) + geom_point() # look at data as points Then as a line ggplot(jennifer, aes(x=year, y=n) ) + geom_line() # instead use a line You can add points and line together ggplot(jennifer, aes(x=year, y=n) ) + geom_point() + geom_line() Changing Color of Line, but not the points ggplot(jennifer, aes(x=year, y=n) ) + geom_point() + geom_line(color = &quot;purple&quot;) This will change the color of both the points and the line ggplot(jennifer, aes(x=year, y=n) ) + geom_point(color = &quot;violet&quot;) + geom_line(color = &quot;purple&quot;) Customize axis labels and title ggplot(jennifer, aes(x=year, y=n) ) + geom_line(color = &quot;purple&quot;) + xlab(&quot;Year&quot;) + ylab(&quot;Number of Children Born&quot;) + ggtitle(&quot;Popularity of Name Jennifer in USA&quot;) Can change width of lines ggplot(jennifer, aes(x=year, y=n) ) + geom_line(color = &#39;purple&#39;, lwd=2) There are many different style of lines here are a few examples ggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=1) ggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=2) ggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=3) ggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=4) Plotting multiple lines on same graph read in data jenlinda &lt;- read_csv(&quot;data/jenlinda.csv&quot;) ## Parsed with column specification: ## cols( ## year = col_double(), ## sex = col_character(), ## name = col_character(), ## n = col_double(), ## prop = col_double() ## ) head(jenlinda) ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1880 Female Linda 27 0.000277 ## 2 1881 Female Linda 38 0.000384 ## 3 1882 Female Linda 36 0.000311 ## 4 1883 Female Linda 49 0.000408 ## 5 1884 Female Linda 33 0.000240 ## 6 1885 Female Linda 60 0.000423 tail(jenlinda) ## # A tibble: 6 x 5 ## year sex name n prop ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 Female Jennifer 1283 0.000660 ## 2 2015 Female Linda 425 0.000218 ## 3 2016 Female Jennifer 1159 0.000601 ## 4 2016 Female Linda 436 0.000226 ## 5 2017 Female Jennifer 1042 0.000556 ## 6 2017 Female Linda 404 0.000215 Just one line ggplot(jenlinda, aes(x=year, y=n, color=name)) + geom_line() Two lines - one for each name. ggplot(jenlinda, aes(x=year, y=n, color=name)) + geom_line()+ xlab(&quot;Year&quot;) + ylab(&quot;Number of Children Born&quot;) + ggtitle(&quot;Popularity of Names Jennifer &amp; Linda in USA&quot;) "]
]
