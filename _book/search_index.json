[
["index.html", "PSY317L Guides 1 Welcome to PSY317!", " PSY317L Guides James P. Curley &amp; Tyler M. Milewski June 28, 2020 1 Welcome to PSY317! The following is a simple guide to R studio. "],
["introduction.html", "2 Introduction 2.1 Downloading R 2.2 Downloading RStudio 2.3 Another subheader of something 2.4 Importing Data", " 2 Introduction This chapter details how to get started using R. The initial steps are downloading and installing R. This may differ slightly based on your machine. 2.1 Downloading R Go to the R website. The first box has options for downloading R for Mac, Windows or Linux. Click on the appropriate link. Then you will want to click on \\(\\color{blue}{\\text{&quot;install R for the first time&quot;}}\\). Then follow the instructions. 2.2 Downloading RStudio blah blah blah 2.3 Another subheader of something blah blah blah 2.4 Importing Data There are different options for importing data. It's possible to import data of all different formats into RStudio. We will primarily use spreadsheet type files that have been saved with the &quot;.csv&quot; suffix. These are called 'comma separated files'. Option 1. Import Tab You can click on the &quot;Import Dataset&quot; tab in the top right of RStudio - it's located just above your global environment. Tyler - perhaps we can insert images here? like this Of course, we should look into how to chaneg image sizes. You then need to click on the appropriate file type that you wish to import. As I mentioned, nearly all our files will be &quot;.csv&quot; files, so you should click on &quot;From CSV&quot;. In other versions of RStudio, this may say &quot;from text (readR)&quot; instead. blah blah blah I can't remember how to insert more space between sections, so I just write to try and force space. Option 2. Writing code. This is the option that we will use in our scripts for this course. You may notice that all the datasets that we wish to use are in a folder called &quot;data&quot;. To read in any of these datasets, what we need to do is use the read_csv() function. This comes from a package contained with the tidyverse package, so we must have imported that library first. We then tell it which dataset to find within the 'data' folder. We use the notation &quot;data/...&quot; to tell it to look inside the data folder. For instance, if we wished to load in the bmi.csv dataset, and assign it the name bmi, we would do it like this - make sure to put quotes around the whole file name and location: library(tidyverse) #load package ## -- Attaching packages --------------------------------------- tidyverse 1.2.1 -- ## v ggplot2 3.2.1 v purrr 0.2.4 ## v tibble 2.1.3 v dplyr 0.8.3 ## v tidyr 1.0.2 v stringr 1.3.1 ## v readr 1.1.1 v forcats 0.3.0 ## Warning: package &#39;ggplot2&#39; was built under R version 3.5.3 ## Warning: package &#39;tibble&#39; was built under R version 3.5.3 ## Warning: package &#39;tidyr&#39; was built under R version 3.5.3 ## Warning: package &#39;dplyr&#39; was built under R version 3.5.3 ## -- Conflicts ------------------------------------------ tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() bmi &lt;- read_csv(&quot;data/bmi.csv&quot;) # bring in data ## Parsed with column specification: ## cols( ## id = col_integer(), ## age = col_double(), ## bmi = col_double(), ## chol = col_double(), ## insulin = col_double(), ## dbp = col_double(), ## sbp = col_double(), ## smoke = col_integer(), ## educ = col_character() ## ) head(bmi) # first six rows ## # A tibble: 6 x 9 ## id age bmi chol insulin dbp sbp smoke educ ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; ## 1 1 18.3 15.4 47.2 2.78 29.5 49.7 1 D ## 2 2 19.4 14.5 52.1 3.47 31.3 49.0 2 C ## 3 3 21.1 16.0 52.2 4.06 32.4 51.7 1 B ## 4 4 21.3 19.5 53.2 4.48 32.0 NA 2 A ## 5 5 21.1 18.6 55.4 5.34 33.7 53.8 1 D ## 6 6 23.9 19.5 54.3 6.29 35.0 56.0 2 C Tyler.....Perhaps we should either suppress the warnings and messages (which you can do in the r chunk header in markdown)? Or we should explain what it means when it gets churned out. blah blah blah more stuff. "],
["basic-syntax.html", "3 Basic Syntax 3.1 assignment 3.2 vectors", " 3 Basic Syntax We kind of need to know at least a tiny bit of syntax before we move forward... keep it very simple. 3.1 assignment e.g. what the assignment operator is. This symbol &lt;- which is just a &quot;greater than sign&quot; followed by a &quot;hyphen&quot; is called an assignment operator. It basically is equivalent to saying you want to save something. You write what you want to be saved on the right hand side of it, and the name of your newly saved thing on the left of it. We call the 'thing' that you've saved an 'object' in programming speak. For instance, say you wanted to save the number 17, and you wanted to call that saved number an object called x. You'd do it like this: x &lt;- 17 Now, whenever you type, x, R thinks that it is the number 17. x ## [1] 17 3.2 vectors Of course, you can save even more complex things as the object. For example, if you wished to save the numbers 5, 6, 7, 8, 9, 10, you have two ways of doing that. Let's just see them in action, and then we'll explain the syntax: v1 &lt;- 5:10 v1 ## [1] 5 6 7 8 9 10 v2 &lt;- c(5,6,7,8,9,10) v2 ## [1] 5 6 7 8 9 10 As you can see both v1 and v2 are our newly saved objects and they both contain the numbers 5 through 10. For v1 we separated the numbers 5 and 10 with a colon :. In R, the : sign can be used to mean &quot;to&quot; when talking about a series of numbers. e.g. 5:10 ## [1] 5 6 7 8 9 10 101:103 ## [1] 101 102 103 The other way we did it with v2 was to use the c() function. This stands for concatenate which is a mouthful. Basically, it's a way of sticking things together. You write c() and then put the stuff you want to stick together inside the brackets, but make sure you separate each thing by a comma ,. For example, c(1,10,100,1000) ## [1] 1 10 100 1000 c(4,6,8,10,8,6,1) ## [1] 4 6 8 10 8 6 1 Another bit of terminology might be worth mentioning right now. Our saved objects x, v1 and v2, as well as being called objects can also be called vectors. A vector is something in R that contains several items. These items are actually called elements. Importantly the items are indexed, which means that they are in order, not all jumbled up. That means that you can directly grab an element by it's position. So, if you wished to get the first element (or item) of the object v1 you'd type like this: v1[1] ## [1] 5 That returns '5' which was our first element we put into the vector. If we wish to get the 3rd element of v1 we'd do this: v1[3] ## [1] 7 And, if we wished to get the first, second and third element of v1 we'd do this: v1[1:3] ## [1] 5 6 7 blah blah blah summary image does the image appear above? I just remembered that if you don't want the image to appear inline, then you leave out the ! from the markdown syntax. summary image "],
["introduction-to-data-carpentry.html", "4 Introduction to Data Carpentry 4.1 tidyverse 4.2 filter() 4.3 select() 4.4 arrange() 4.5 mutate()", " 4 Introduction to Data Carpentry What data carpentry is blah blah blah 4.1 tidyverse blah blah blah 4.2 filter() blah 4.3 select() blah 4.4 arrange() blah 4.5 mutate() new column blah blah "],
["data-visualization.html", "5 Data Visualization 5.1 Scatter Plots", " 5 Data Visualization The package ggplot2 is used to visualize data. Before starting you should load the tidyverse package, which includes ggplot2 and other tools, at the very top of your script. See example below. You need to do it once for every script. library(tidyverse) Next you need to read in your data! # {r} # df &lt;- read.csv(&quot;&quot;) # 5.1 Scatter Plots "],
["r-ggplotdf-x-y-geom-point.html", "6 {r} # ggplot(df, (x = , y = )) + # geom_point() #", " 6 {r} # ggplot(df, (x = , y = )) + # geom_point() # "],
["descriptives.html", "7 Descriptives", " 7 Descriptives blah "],
["distributions.html", "8 Distributions", " 8 Distributions blah "],
["confidence-intervals.html", "9 Confidence Intervals", " 9 Confidence Intervals blah "],
["inferential-stats.html", "10 Inferential Stats", " 10 Inferential Stats blah "],
["correlation.html", "11 Correlation", " 11 Correlation blah "],
["regression.html", "12 Regression", " 12 Regression blah "]
]
