[
["introduction-to-data-carpentry.html", "4 Introduction to Data Carpentry 4.1 tidyverse 4.2 filter() 4.3 select() 4.4 mutate() 4.5 Arrange 4.6 Wide vs Long Data 4.7 Joins", " 4 Introduction to Data Carpentry Data carpentry gives us the tools to work with large data sets. During this chapter you will learn basic concepts, skills to help you work with functions to help tidy and manage your data. Things to know before beginning the chapter: filter() - subsetting data select() - selecting columns arrange() - sorting a column mutate() - adding a new column %&gt;% means “and next do this” == means “is equal to” != means “is not equal to” means “or” 4.1 tidyverse The package tidyverse is what we will be using for most of our data carpentry. tidyverse is a larger package which includes several packages useful for dealing with data such as tidyr, dplyr, ggplot2, and more. All of these packages work together to manipulate, reshape, and visual data. Before using tidyverse you will need to install and load the package. You will only need to install a package once, but will have to load a library on every script you plan to use it. install.package(tidyverse) #install From the tidyverse package rread we can read in our data. library(tidyverse) #load bw &lt;- read_csv(&quot;data/bloodwork.csv&quot;) bw is the name of our new dataframe, which will include all data from the bloodwork.csv file. Before we can work with our data we need to what we have to work with using the functions head() and tail() allows you to see the first and last 6 rows, respectfully. head(bw) # first 6 lines ## # A tibble: 6 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; tail(bw) #last 6 lines ## # A tibble: 6 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JIB 66 fema~ NY 0 no 62 121 0.097 1.39 ## 2 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 3 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 4 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## 5 HHJ 69 male CT 2 no 71 121 0.475 0.463 ## 6 CCG 70 male CT 0 yes 80 132 0.078 1.06 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; should we explain the dataset?? idk table() summarizes categorical variables. table(bw\\(sex) table(bw\\)children) table(bw\\(sex, bw\\)children) 4.2 filter() Use %&gt;% and ‘filter’ to only keep rows where the hrate, heart rate, is over 60. &gt; means greater than. bw %&gt;% filter(hrate &gt; 60) ## # A tibble: 30 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 7 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 8 BED 28 fema~ CT 0 no 62 104 0.082 1.18 ## 9 BFB 28 fema~ NJ 0 no 68 118 0.197 0.724 ## 10 IEA 29 fema~ CT 0 yes 74 117 0.429 5.15 ## # ... with 20 more rows, and 1 more variable: immuncount2 &lt;dbl&gt; Use %&gt;% and ‘filter’ to only keep rows where the sex is equal to female. bw %&gt;% filter(sex == &quot;female&quot;) ## # A tibble: 18 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 3 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 4 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 5 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 6 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 7 BED 28 fema~ CT 0 no 62 104 0.082 1.18 ## 8 BFB 28 fema~ NJ 0 no 68 118 0.197 0.724 ## 9 IEA 29 fema~ CT 0 yes 74 117 0.429 5.15 ## 10 CDC 38 fema~ NJ 0 no 66 133 0.038 8.00 ## 11 FJG 40 fema~ NJ 0 yes 80 109 0.253 5.63 ## 12 DAG 41 fema~ CT 0 yes 70 142 0.339 5.52 ## 13 FHA 53 fema~ CT 2 no 77 125 0.099 0.034 ## 14 JHC 55 fema~ CT 0 no 73 121 0.093 1.32 ## 15 JIB 66 fema~ NY 0 no 62 121 0.097 1.39 ## 16 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 17 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 18 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; You can filter to only include, certain rows, such as state as “NJ” or “NY” in the bloodwork dataset. bw %&gt;% filter(state == &quot;NJ&quot; | state == &quot;NY&quot;) ## # A tibble: 18 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 5 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 6 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 7 BFB 28 fema~ NJ 0 no 68 118 0.197 0.724 ## 8 ACC 33 male NJ 1 no 63 131 0.065 4.66 ## 9 CDC 38 fema~ NJ 0 no 66 133 0.038 8.00 ## 10 EEB 39 male NJ 1 no 68 104 0.594 3.06 ## 11 FJG 40 fema~ NJ 0 yes 80 109 0.253 5.63 ## 12 AGC 43 male NY 1 yes 77 108 0.072 1.44 ## 13 FGD 50 male NY 0 yes 77 147 0.428 0.037 ## 14 JCI 52 male NY 1 yes 61 115 0.131 0.233 ## 15 JIB 66 fema~ NY 0 no 62 121 0.097 1.39 ## 16 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 17 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 18 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; You can filter several variables at one time. bw %&gt;% filter( sex == &quot;female&quot;, hrate &gt; 60, children != &quot;0&quot; ) ## # A tibble: 8 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 3 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 4 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 5 FHA 53 fema~ CT 2 no 77 125 0.099 0.034 ## 6 HBB 67 fema~ NJ 1 yes 74 147 0.288 2.27 ## 7 HDG 68 fema~ NY 3 yes 65 129 0.11 2.65 ## 8 ECD 68 fema~ NJ 2 yes 77 129 0.404 2.02 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; You can create new datasets from filtered data by creating a new object female &lt;- bw %&gt;% filter( sex == &quot;female&quot;, hrate &gt; 60, children != &quot;0&quot; ) 4.3 select() Use %&gt;% then select to just select the rows you want. bw %&gt;% select(ids, sex, smoker,hrate,children) ## # A tibble: 30 x 5 ## ids sex smoker hrate children ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC female no 63 1 ## 2 GBH male yes 73 1 ## 3 EDH female no 65 0 ## 4 AAA female no 66 3 ## 5 AJF female no 67 0 ## 6 FJC female yes 80 1 ## 7 IEE female no 71 2 ## 8 BED female no 62 0 ## 9 BFB female no 68 0 ## 10 IEA female yes 74 0 ## # ... with 20 more rows Or if you just want to get rid of one column you can just use %&gt;% then select(-var) bw %&gt;% select(-children, -bpsyst) ## # A tibble: 30 x 9 ## ids age sex state smoker hrate cellcount immuncount immuncount2 ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 female NJ no 63 0.126 0.993 0.921 ## 2 GBH 20 male NY yes 73 0.169 1.18 1.19 ## 3 EDH 21 female NJ no 65 0.281 4.34 3.21 ## 4 AAA 21 female CT no 66 0.244 2.56 4.01 ## 5 AJF 24 female NJ no 67 0.092 6.45 9.13 ## 6 FJC 25 female NY yes 80 0.014 3.97 2.85 ## 7 IEE 26 female NY no 71 0.093 5.41 10.2 ## 8 BED 28 female CT no 62 0.082 1.18 0.788 ## 9 BFB 28 female NJ no 68 0.197 0.724 0.848 ## 10 IEA 29 female CT yes 74 0.429 5.15 4.97 ## # ... with 20 more rows You can rename columns as you go bw %&gt;% select(subject = ids, gender = sex, smoker,hrate,children) ## # A tibble: 30 x 5 ## subject gender smoker hrate children ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC female no 63 1 ## 2 GBH male yes 73 1 ## 3 EDH female no 65 0 ## 4 AAA female no 66 3 ## 5 AJF female no 67 0 ## 6 FJC female yes 80 1 ## 7 IEE female no 71 2 ## 8 BED female no 62 0 ## 9 BFB female no 68 0 ## 10 IEA female yes 74 0 ## # ... with 20 more rows if you want these selections to be permanent then you need to rewrite selections in new dataframe. See the difference between bw and bw1 bw1 &lt;- bw %&gt;% select(subject = ids, gender = sex, smoker,hrate,children) head(bw) ## # A tibble: 6 x 11 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## # ... with 1 more variable: immuncount2 &lt;dbl&gt; head(bw1) ## # A tibble: 6 x 5 ## subject gender smoker hrate children ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC female no 63 1 ## 2 GBH male yes 73 1 ## 3 EDH female no 65 0 ## 4 AAA female no 66 3 ## 5 AJF female no 67 0 ## 6 FJC female yes 80 1 If you just want to use the column number, you can do that too! The code below selects for column 1-4, 9, 10, but does not save the information as a new object. bw %&gt;% select(1,2,3,4,9,10) ## # A tibble: 30 x 6 ## ids age sex state cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 female NJ 0.126 0.993 ## 2 GBH 20 male NY 0.169 1.18 ## 3 EDH 21 female NJ 0.281 4.34 ## 4 AAA 21 female CT 0.244 2.56 ## 5 AJF 24 female NJ 0.092 6.45 ## 6 FJC 25 female NY 0.014 3.97 ## 7 IEE 26 female NY 0.093 5.41 ## 8 BED 28 female CT 0.082 1.18 ## 9 BFB 28 female NJ 0.197 0.724 ## 10 IEA 29 female CT 0.429 5.15 ## # ... with 20 more rows bw %&gt;% select(1:4,9,10) ## # A tibble: 30 x 6 ## ids age sex state cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 female NJ 0.126 0.993 ## 2 GBH 20 male NY 0.169 1.18 ## 3 EDH 21 female NJ 0.281 4.34 ## 4 AAA 21 female CT 0.244 2.56 ## 5 AJF 24 female NJ 0.092 6.45 ## 6 FJC 25 female NY 0.014 3.97 ## 7 IEE 26 female NY 0.093 5.41 ## 8 BED 28 female CT 0.082 1.18 ## 9 BFB 28 female NJ 0.197 0.724 ## 10 IEA 29 female CT 0.429 5.15 ## # ... with 20 more rows 4.4 mutate() Create new columns using %&gt;% then mutate bw %&gt;% mutate(totalimmune = immuncount + immuncount2) ## # A tibble: 30 x 12 ## ids age sex state children smoker hrate bpsyst cellcount immuncount ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 JEC 19 fema~ NJ 1 no 63 101 0.126 0.993 ## 2 GBH 20 male NY 1 yes 73 120 0.169 1.18 ## 3 EDH 21 fema~ NJ 0 no 65 100 0.281 4.34 ## 4 AAA 21 fema~ CT 3 no 66 109 0.244 2.56 ## 5 AJF 24 fema~ NJ 0 no 67 108 0.092 6.45 ## 6 FJC 25 fema~ NY 1 yes 80 118 0.014 3.97 ## 7 IEE 26 fema~ NY 2 no 71 118 0.093 5.41 ## 8 BED 28 fema~ CT 0 no 62 104 0.082 1.18 ## 9 BFB 28 fema~ NJ 0 no 68 118 0.197 0.724 ## 10 IEA 29 fema~ CT 0 yes 74 117 0.429 5.15 ## # ... with 20 more rows, and 2 more variables: immuncount2 &lt;dbl&gt;, ## # totalimmune &lt;dbl&gt; Saving new column in a new data frame. Now, bw2 will have 12 columns, instead of 11. bw2 &lt;- bw %&gt;% mutate(totalimmune = immuncount + immuncount2) You can also create new columns without tidyverse bw$totalimmune &lt;- bw$immuncount + bw$immuncount2 Now bw and bw2 are the same. 4.5 Arrange Lets try another example! pga &lt;- read_csv(&quot;data/pga.csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_double(), ## name = col_character(), ## country = col_character(), ## label = col_character() ## ) ## See spec(...) for full column specifications. head(pga) ## # A tibble: 6 x 53 ## drivepct fairways.hit possible.fairwa~ year name driveavg total.distance ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 77.2 1031 1335 2004 Fred~ 272. 52198 ## 2 77.1 978 1268 2004 Scot~ 278 50314 ## 3 76.2 881 1157 2004 Crai~ 271. 44959 ## 4 75.1 886 1180 2004 Joe ~ 287. 48829 ## 5 74.7 861 1153 2004 Tom ~ 273. 45246 ## 6 74.3 664 894 2004 Jose~ 279. 35479 ## # ... with 46 more variables: total.drives &lt;dbl&gt;, rounds &lt;dbl&gt;, girpct &lt;dbl&gt;, ## # greens.hit &lt;dbl&gt;, total.holes &lt;dbl&gt;, goforgreenpct &lt;dbl&gt;, ## # goforgreen.attempts &lt;dbl&gt;, goforgreen.noattempts &lt;dbl&gt;, sandsavepct &lt;dbl&gt;, ## # total.sandsaves &lt;dbl&gt;, total.bunkers &lt;dbl&gt;, scramblingpct &lt;dbl&gt;, ## # parorbetter &lt;dbl&gt;, missedgir &lt;dbl&gt;, threeputtpct &lt;dbl&gt;, ## # threeputt.total &lt;dbl&gt;, oneputtpct &lt;dbl&gt;, oneputt.total &lt;dbl&gt;, ## # putts.avg &lt;dbl&gt;, total.putts &lt;dbl&gt;, rounds1 &lt;dbl&gt;, birdiepct &lt;dbl&gt;, ## # total.birdies &lt;dbl&gt;, score.avg &lt;dbl&gt;, strokes &lt;dbl&gt;, ## # birdiebogieratio &lt;dbl&gt;, total.birdies.better &lt;dbl&gt;, ## # total.bogeys.worse &lt;dbl&gt;, par3.birdiepct &lt;dbl&gt;, par3.birdies.better &lt;dbl&gt;, ## # par3.holes &lt;dbl&gt;, par4.birdiepct &lt;dbl&gt;, par4.birdies.better &lt;dbl&gt;, ## # par4.holes &lt;dbl&gt;, par5.birdiepct &lt;dbl&gt;, par5.birdies.better &lt;dbl&gt;, ## # par5.holes &lt;dbl&gt;, total.events &lt;dbl&gt;, top10s &lt;dbl&gt;, firsts &lt;dbl&gt;, ## # seconds &lt;dbl&gt;, thirds &lt;dbl&gt;, moneypct &lt;dbl&gt;, totalmoney &lt;dbl&gt;, ## # country &lt;chr&gt;, label &lt;chr&gt; colnames(pga) ## [1] &quot;drivepct&quot; &quot;fairways.hit&quot; &quot;possible.fairways&quot; ## [4] &quot;year&quot; &quot;name&quot; &quot;driveavg&quot; ## [7] &quot;total.distance&quot; &quot;total.drives&quot; &quot;rounds&quot; ## [10] &quot;girpct&quot; &quot;greens.hit&quot; &quot;total.holes&quot; ## [13] &quot;goforgreenpct&quot; &quot;goforgreen.attempts&quot; &quot;goforgreen.noattempts&quot; ## [16] &quot;sandsavepct&quot; &quot;total.sandsaves&quot; &quot;total.bunkers&quot; ## [19] &quot;scramblingpct&quot; &quot;parorbetter&quot; &quot;missedgir&quot; ## [22] &quot;threeputtpct&quot; &quot;threeputt.total&quot; &quot;oneputtpct&quot; ## [25] &quot;oneputt.total&quot; &quot;putts.avg&quot; &quot;total.putts&quot; ## [28] &quot;rounds1&quot; &quot;birdiepct&quot; &quot;total.birdies&quot; ## [31] &quot;score.avg&quot; &quot;strokes&quot; &quot;birdiebogieratio&quot; ## [34] &quot;total.birdies.better&quot; &quot;total.bogeys.worse&quot; &quot;par3.birdiepct&quot; ## [37] &quot;par3.birdies.better&quot; &quot;par3.holes&quot; &quot;par4.birdiepct&quot; ## [40] &quot;par4.birdies.better&quot; &quot;par4.holes&quot; &quot;par5.birdiepct&quot; ## [43] &quot;par5.birdies.better&quot; &quot;par5.holes&quot; &quot;total.events&quot; ## [46] &quot;top10s&quot; &quot;firsts&quot; &quot;seconds&quot; ## [49] &quot;thirds&quot; &quot;moneypct&quot; &quot;totalmoney&quot; ## [52] &quot;country&quot; &quot;label&quot; table(pga$year) ## ## 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 ## 195 201 195 195 195 183 191 185 190 179 176 184 let’s pick out name, year, total.holes, total.putts, score.avg columns and save as pga1. pga %&gt;% select(name, year, total.holes, total.putts, score.avg) ## # A tibble: 2,269 x 5 ## name year total.holes total.putts score.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Fred Funk 2004 1728 2774 70.4 ## 2 Scott Verplank 2004 1638 2619 69.9 ## 3 Craig Bowden 2004 1494 2401 71.5 ## 4 Joe Durant 2004 1530 2563 70.7 ## 5 Tom Byrum 2004 1494 2380 70.5 ## 6 Jose Coceres 2004 1152 1819 71.0 ## 7 Bart Bryant 2004 1242 2041 70.5 ## 8 Olin Browne 2004 1584 2580 71.3 ## 9 John Cook 2004 954 1550 71.7 ## 10 Omar Uresti 2004 1530 2470 71.7 ## # ... with 2,259 more rows pga1 &lt;- pga %&gt;% select(name, year, total.holes, total.putts, score.avg) Here we can sort a column using arrange(). There are many ways you can arrange your data. sorts data in ascending order pga1 %&gt;% arrange(score.avg) ## # A tibble: 2,269 x 5 ## name year total.holes total.putts score.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Tiger Woods 2007 1080 1736 67.8 ## 2 Tiger Woods 2009 1116 1763 68.1 ## 3 Tiger Woods 2006 936 1528 68.1 ## 4 Tiger Woods 2005 1332 2124 68.7 ## 5 Rory McIlroy 2014 1152 1830 68.8 ## 6 Vijay Singh 2004 1980 3216 68.8 ## 7 Luke Donald 2011 1206 1878 68.9 ## 8 Jim Furyk 2006 1584 2539 68.9 ## 9 Rory McIlroy 2012 972 1551 68.9 ## 10 Steve Stricker 2013 846 1348 68.9 ## # ... with 2,259 more rows sorts data in descending order pga1 %&gt;% arrange(-score.avg) ## # A tibble: 2,269 x 5 ## name year total.holes total.putts score.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 David Gossett 2004 1026 1693 75.0 ## 2 Kevin Muncrief 2004 900 1490 73.5 ## 3 Chris Couch 2004 990 1635 73.5 ## 4 Hidemichi Tanaka 2006 1314 2136 73.5 ## 5 David Duval 2008 918 1497 73.2 ## 6 Brad Faxon 2010 972 1567 73.1 ## 7 Eric Axley 2009 1206 1916 73.1 ## 8 Hirofumi Miyase 2004 1134 1857 73.1 ## 9 Greg Kraft 2010 828 1370 73.1 ## 10 Stephen Gangluff 2012 918 1507 73.0 ## # ... with 2,259 more rows sorts data in ascending alphabetical order pga1 %&gt;% arrange(name) ## # A tibble: 2,269 x 5 ## name year total.holes total.putts score.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Aaron Baddeley 2004 1530 2411 71.6 ## 2 Aaron Baddeley 2005 1476 2303 71.3 ## 3 Aaron Baddeley 2006 1368 2125 71.2 ## 4 Aaron Baddeley 2007 1440 2261 70.1 ## 5 Aaron Baddeley 2008 1314 2072 70.2 ## 6 Aaron Baddeley 2009 1170 1826 71.2 ## 7 Aaron Baddeley 2010 1692 2686 71.0 ## 8 Aaron Baddeley 2011 1350 2129 70.2 ## 9 Aaron Baddeley 2012 1296 2021 71.1 ## 10 Aaron Baddeley 2013 1188 1835 71.5 ## # ... with 2,259 more rows sorts data first by year, then by score pga1 %&gt;% arrange(year, score.avg) ## # A tibble: 2,269 x 5 ## name year total.holes total.putts score.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Vijay Singh 2004 1980 3216 68.8 ## 2 Ernie Els 2004 1044 1653 69.0 ## 3 Tiger Woods 2004 1296 2048 69.0 ## 4 Phil Mickelson 2004 1422 2287 69.2 ## 5 Retief Goosen 2004 990 1580 69.3 ## 6 Sergio Garcia 2004 1152 1919 69.8 ## 7 Stewart Cink 2004 1746 2731 69.8 ## 8 Stephen Ames 2004 1710 2756 69.9 ## 9 Scott Verplank 2004 1638 2619 69.9 ## 10 David Toms 2004 1332 2174 70.0 ## # ... with 2,259 more rows You can use the pipe, %&gt;%, in tidyverse to run multiple commands at once. pga %&gt;% select(name, year, total.holes, total.putts, score.avg) %&gt;% mutate(putt.avg = total.putts / total.holes) %&gt;% arrange(putt.avg) ## # A tibble: 2,269 x 6 ## name year total.holes total.putts score.avg putt.avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Brian Gay 2013 1422 2173 71.2 1.53 ## 2 Kevin Na 2011 1512 2331 70.4 1.54 ## 3 Greg Chalmers 2011 1548 2388 70.6 1.54 ## 4 Justin Leonard 2014 1350 2083 70.9 1.54 ## 5 Steve Stricker 2005 1116 1723 71.1 1.54 ## 6 Aaron Baddeley 2013 1188 1835 71.5 1.54 ## 7 Jordan Spieth 2015 1584 2448 68.9 1.55 ## 8 Jordan Spieth 2014 1764 2730 69.9 1.55 ## 9 Tim Clark 2007 1152 1784 69.9 1.55 ## 10 Jonas Blixt 2012 1260 1952 70.2 1.55 ## # ... with 2,259 more rows 4.6 Wide vs Long Data Sometimes you will need to rearrange your data for some data analysis and more commonly for data visualization. tidyverse has built in functions that can turn your dataframe from long format to wide format and vice versa. pivot_longer makes the dataframes longer by increasing the number of rows by combing the number of columns. This is called long form data, which is needed to tidy data for graphing and some analysis. wheel &lt;- read_csv(&quot;data/wheels1.csv&quot;) ## Parsed with column specification: ## cols( ## strain = col_character(), ## id = col_character(), ## day1 = col_double(), ## day2 = col_double(), ## day3 = col_double(), ## day4 = col_double(), ## dob = col_character(), ## mother = col_character(), ## sex = col_character(), ## wheel = col_double(), ## startdate = col_character(), ## total = col_double(), ## age = col_double(), ## group = col_character() ## ) head(wheel) ## # A tibble: 6 x 14 ## strain id day1 day2 day3 day4 dob mother sex wheel startdate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 B6 692ao 12853 8156. 9028. 12516. 4/18~ 633ax male 9 10/9/2005 ## 2 B6 656aa 2644 4012. 5237 7404. 12/1~ 593ar male 1 9/12/2005 ## 3 B6 675ag 4004. 3054. 3816. 3761 2/9/~ 593ad male 5 10/13/20~ ## 4 B6 675ai 11754. 8863 11784 11684 2/9/~ 593ad male 4 10/13/20~ ## 5 B6 656af 6906. 5322. 10424. 8468. 12/1~ 593ar male 2 10/13/20~ ## 6 B6 656al 6517 4440 5334. 9291 12/1~ 554aa male 8 10/9/2005 ## # ... with 3 more variables: total &lt;dbl&gt;, age &lt;dbl&gt;, group &lt;chr&gt; Here we can make the wheel data into long form, by combining day1, day2, day3, and day4 into 2 columns one called day and another called distance. wheel_long &lt;-wheel %&gt;% pivot_longer( cols = starts_with(&quot;day&quot;), names_to = &quot;day&quot;, values_to = &quot;distance&quot; ) head(wheel_long) ## # A tibble: 6 x 12 ## strain id dob mother sex wheel startdate total age group day ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 B6 692ao 4/18~ 633ax male 9 10/9/2005 42552. 174 inbr~ day1 ## 2 B6 692ao 4/18~ 633ax male 9 10/9/2005 42552. 174 inbr~ day2 ## 3 B6 692ao 4/18~ 633ax male 9 10/9/2005 42552. 174 inbr~ day3 ## 4 B6 692ao 4/18~ 633ax male 9 10/9/2005 42552. 174 inbr~ day4 ## 5 B6 656aa 12/1~ 593ar male 1 9/12/2005 19297 270 inbr~ day1 ## 6 B6 656aa 12/1~ 593ar male 1 9/12/2005 19297 270 inbr~ day2 ## # ... with 1 more variable: distance &lt;dbl&gt; Other ways to do this. pivot_wider() makes the dataframes longer by decreasing the number of rows by separating the number of columns. This is called wide form data, which id usefull for summarying data in tables and using some functions in R. Now let’s make the dataframe wide again. wheel_long %&gt;% pivot_wider( names_from = day, values_from = distance ) ## # A tibble: 80 x 14 ## strain id dob mother sex wheel startdate total age group day1 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 B6 692ao 4/18~ 633ax male 9 10/9/2005 42552. 174 inbr~ 12853 ## 2 B6 656aa 12/1~ 593ar male 1 9/12/2005 19297 270 inbr~ 2644 ## 3 B6 675ag 2/9/~ 593ad male 5 10/13/20~ 14634. 246 inbr~ 4004. ## 4 B6 675ai 2/9/~ 593ad male 4 10/13/20~ 44086. 246 inbr~ 11754. ## 5 B6 656af 12/1~ 593ar male 2 10/13/20~ 31122 301 inbr~ 6906. ## 6 B6 656al 12/1~ 554aa male 8 10/9/2005 25582. 294 inbr~ 6517 ## 7 B6 692an 4/18~ 633ax male 1 10/25/20~ 45352 190 inbr~ 11366. ## 8 B6 705ab 7/25~ 675aj male 7 10/25/20~ 51766 92 inbr~ 13794. ## 9 B6 692at 4/20~ 633ba male 1 10/13/20~ 54777 176 inbr~ 10486. ## 10 B6 692au 4/20~ 633ak male 2 10/25/20~ 31062. 188 inbr~ 4592. ## # ... with 70 more rows, and 3 more variables: day2 &lt;dbl&gt;, day3 &lt;dbl&gt;, ## # day4 &lt;dbl&gt; 4.7 Joins When working with sometimes you need to join two different data sets, based on one or more variables. Lets make up some data x &lt;- data.frame(&quot;id&quot; = 1:10, &quot;age&quot; = c(21,25,17,34,25,33,22,27,29,24)) head(x) ## id age ## 1 1 21 ## 2 2 25 ## 3 3 17 ## 4 4 34 ## 5 5 25 ## 6 6 33 y &lt;- data.frame(&quot;id&quot; = 1:10, &quot;height_cm&quot; = c(156, 155, 154, 149, 153, 152, 151, 150, 147, 155), &quot;activity_hr&quot;= c(3,5,3,6,7,4,2,8,4,5), &quot;work_hr&quot; =c(40,35,38,46,50,42,40,46,41,40)) head(y) ## id height_cm activity_hr work_hr ## 1 1 156 3 40 ## 2 2 155 5 35 ## 3 3 154 3 38 ## 4 4 149 6 46 ## 5 5 153 7 50 ## 6 6 152 4 42 full_join() joins 2 different dataframes based on one or more shared variable(s). The following will join based on id. x %&gt;% full_join(y) ## Joining, by = &quot;id&quot; ## id age height_cm activity_hr work_hr ## 1 1 21 156 3 40 ## 2 2 25 155 5 35 ## 3 3 17 154 3 38 ## 4 4 34 149 6 46 ## 5 5 25 153 7 50 ## 6 6 33 152 4 42 ## 7 7 22 151 2 40 ## 8 8 27 150 8 46 ## 9 9 29 147 4 41 ## 10 10 24 155 5 40 Save as a new data frame to use again: new &lt;- x %&gt;% full_join(y) ## Joining, by = &quot;id&quot; head(new) ## id age height_cm activity_hr work_hr ## 1 1 21 156 3 40 ## 2 2 25 155 5 35 ## 3 3 17 154 3 38 ## 4 4 34 149 6 46 ## 5 5 25 153 7 50 ## 6 6 33 152 4 42 "]
]
